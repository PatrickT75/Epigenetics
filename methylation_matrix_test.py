# -*- coding: utf-8 -*-
"""Methylation Matrix Test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11EPk-u3itv-r32imNlNGgtz9a2VldRt1

# Methylation Matrix for RRBS Data

Instructions:
1. Use **make_list_of_dicts(*files)** to load data into a list of dictionaries. Each dictionary in the list is one sample, where the key is the position on the genome and the value is the methylation ratio (only those with >10x coverage taken.)

2. Use **get_list_of_positions(dictionary_list)** to take the union of positions recorded in each sample.

3. Use **aggregate_dict(position list, dictionary list)** to create an aggregated dictionary, with all positions included. If the position is found in less than 75% of samples, it will not be in the aggregated dictionary.

4. Create **Chromosome** object for each chromsome (1-22, M, X, Y). The chromosome class has a dictionary that tells which cytosine positions are in each region, as well as an array of the ratios for each region. Here a region is defined as an area with more than one cytosine which has length **global_max_size** or smaller.

5. Use **save_to_file()** to print all the chromosomes into txt files.

Input in step 1 are the txt files for each sample.

Ouput is a list of Chromosomes, each with regions and the ratios for each corresponding region.

The estimated time for 3 files is 1.5 to 2 minutes.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def make_list_of_dict(*args):
    dict_list = []
    for arg in args:
        dictionary = {}
        filetest = open(arg, "r")
        for line in filetest:
            line_split = line.split('\t')
            if line_split[5] != 'eff_CT_count':
                pos = str(line_split[0]) + ',' + str(line_split[1])
                # Coverage >= 10x
                if float(line_split[5]) >= 10:
                    dictionary[pos] = line_split[4]
        filetest.close()
        dict_list.append(dictionary)
    
    return dict_list

def get_list_of_positions(dictionary_list):
    aggregate_positions = []
    
    # Copy down all positions in first sample
    for pos in dictionary_list[0]:
        aggregate_positions.append(pos)

    # For all other samples, check if position already exists. If not, add it.
    for i in range(len(dictionary_list) - 1):
        for pos in dictionary_list[i+1]:
            match = False
            # For third sample and above
            if i > 0:
                for k in range(i):
                    if pos in dictionary_list[k]:
                        match = True           
            # For second sample
            else:
                if pos in dictionary_list[0]:
                    match = True
                    
            if match == False:
                aggregate_positions.append(pos)
        
    return aggregate_positions

def aggregate_dict(pos_list, dictionary):
    new_dict = {}
    for pos in pos_list:
        list_to_add = []
        
        tot_not_found = 0
        for i in range(len(dictionary)):
            if pos not in dictionary[i]:
                list_to_add.append(0)
                tot_not_found += 1
            else:
                list_to_add.append(float(dictionary[i][pos]))
        
        # Looks for positions with coverage in more than 75% of samples
        if tot_not_found/len(list_to_add) < 0.25:
            new_dict[pos] = list_to_add

    return new_dict

def individual_chromosome_dict(dictionary, chrom_num):
    # Makes an individual dictionary for a specified chromosome from the full dictionary.
    new_dict = {}
    for key in dictionary:
        split_key = key.split(',')
        if split_key[0][3:] == chrom_num:
            new_dict[int(split_key[1])] = dictionary[key]
    
    return new_dict

def find_regions(pos_list, max_size):
    # Takes an ordered list of cytosine positions, and merges them into a region with a given maximum size.
    region = 1
    regions_list = {}
    end = 0
    
    for start in range(len(pos_list)):
        start = end
        while pos_list[end] - pos_list[start] <= max_size:
            if end >= len(pos_list) - 1:
                return regions_list
            else:
                end += 1
        m_list = []
        for x in range(end-start):
            m_list.append(pos_list[start+x])
        if len(m_list) > 1:
            regions_list[region] = m_list
        region += 1
    
    return regions_list

def find_average_ratio(full_dictionary, region_dictionary):
    # For each region, give the methylation ratios of each sample as an array.
    final_list = []
            
    for region in region_dictionary:
        list_of_arrays = []
        for position in region_dictionary[region]:
            position_array = np.array(full_dictionary[position])
            list_of_arrays.append(position_array)
            full_array = np.array(list_of_arrays)
        average = np.mean(full_array, axis = 0)
        
        final_list.append(average)
    final_list = np.asarray(final_list)
                
    return final_list

class Chromosome:
    def __init__(self, number, dictionary, max_size):
        self.number = number
        self.dictionary = dictionary
        m_list = sorted(self.dictionary) 
        self.region_dict = find_regions(m_list, max_size)
        self.region_ratios = find_average_ratio(self.dictionary, self.region_dict)

"""# Running the Code"""

# Add names of all files here...
raw_dictionary_list = make_list_of_dict("GSM2342293_AT1_index_20_trimmed.fq.gz_4mis_uniq_w_reference.sam-sorted.ratio.txt", "GSM2342497_AT9_index_23_trimmed.fq.gz_4mis_uniq_w_reference.sam-sorted.ratio.txt", \
"GSM2342496_AT9_index_22_trimmed.fq.gz_4mis_uniq_w_reference.sam-sorted.ratio.txt")
pos_list = get_list_of_positions(raw_dictionary_list)
table = aggregate_dict(pos_list, raw_dictionary_list)

# Change global_max_size as needed...
global_max_size = 3000

Chr_1 = Chromosome('1', individual_chromosome_dict(table, '1'), global_max_size)
Chr_2 = Chromosome('2', individual_chromosome_dict(table, '2'), global_max_size)
Chr_3 = Chromosome('3', individual_chromosome_dict(table, '3'), global_max_size)
Chr_4 = Chromosome('4', individual_chromosome_dict(table, '4'), global_max_size)
Chr_5 = Chromosome('5', individual_chromosome_dict(table, '5'), global_max_size)
Chr_6 = Chromosome('6', individual_chromosome_dict(table, '6'), global_max_size)
Chr_7 = Chromosome('7', individual_chromosome_dict(table, '7'), global_max_size)
Chr_8 = Chromosome('8', individual_chromosome_dict(table, '8'), global_max_size)
Chr_9 = Chromosome('9', individual_chromosome_dict(table, '9'), global_max_size)
Chr_10 = Chromosome('10', individual_chromosome_dict(table, '10'), global_max_size)
Chr_11 = Chromosome('11', individual_chromosome_dict(table, '11'), global_max_size)
Chr_12 = Chromosome('12', individual_chromosome_dict(table, '12'), global_max_size)
Chr_13 = Chromosome('13', individual_chromosome_dict(table, '13'), global_max_size)
Chr_14 = Chromosome('14', individual_chromosome_dict(table, '14'), global_max_size)
Chr_15 = Chromosome('15', individual_chromosome_dict(table, '15'), global_max_size)
Chr_16 = Chromosome('16', individual_chromosome_dict(table, '16'), global_max_size)
Chr_17 = Chromosome('17', individual_chromosome_dict(table, '17'), global_max_size)
Chr_18 = Chromosome('18', individual_chromosome_dict(table, '18'), global_max_size)
Chr_19 = Chromosome('19', individual_chromosome_dict(table, '19'), global_max_size)
Chr_20 = Chromosome('20', individual_chromosome_dict(table, '20'), global_max_size)
Chr_21 = Chromosome('21', individual_chromosome_dict(table, '21'), global_max_size)
Chr_22 = Chromosome('22', individual_chromosome_dict(table, '22'), global_max_size)
Chr_M = Chromosome('M', individual_chromosome_dict(table, 'M'), global_max_size)
Chr_X = Chromosome('X', individual_chromosome_dict(table, 'X'), global_max_size)
Chr_Y = Chromosome('Y', individual_chromosome_dict(table, 'Y'), global_max_size)

# Change these as needed
def save_to_file():
    Chr_list = [Chr_1, Chr_2, Chr_3, Chr_4, Chr_5, Chr_6, Chr_7, Chr_8, Chr_9, Chr_10, Chr_11, Chr_12, Chr_13, Chr_14, Chr_15, Chr_16, Chr_17, Chr_18, Chr_19, Chr_20, Chr_21, Chr_22, Chr_M, Chr_X, Chr_Y]
    filenames = ["Chr_1_3kb.txt", "Chr_2_3kb.txt", "Chr_3_3kb.txt", "Chr_4_3kb.txt", "Chr_5_3kb.txt", "Chr_6_3kb.txt", "Chr_7_3kb.txt", "Chr_8_3kb.txt", "Chr_9_3kb.txt", "Chr_10_3kb.txt", "Chr_11_3kb.txt", "Chr_12_3kb.txt", "Chr_13_3kb.txt", "Chr_14_3kb.txt", "Chr_15_3kb.txt", "Chr_16_3kb.txt", "Chr_17_3kb.txt", "Chr_18_3kb.txt", "Chr_19_3kb.txt", "Chr_20_3kb.txt", "Chr_21_3kb.txt", "Chr_22_3kb.txt", "Chr_M_3kb.txt", "Chr_X_3kb.txt", "Chr_Y_3kb.txt"]
    headers = ["Chr 1", "Chr 2", "Chr 3", "Chr 4", "Chr 5", "Chr 6", "Chr 7", "Chr 8", "Chr 9", "Chr 10", "Chr 11", "Chr 12", "Chr 13", "Chr 14", "Chr 15", "Chr 16", "Chr 17", "Chr 18", "Chr 19", "Chr 20", "Chr 21", "Chr 22", "Chr M", "Chr X", "Chr Y"]
    for i in range(len(filenames_2)):
        np.savetxt(filenames_2[i], Chr_list_2[i].region_ratios, header=headers_2[i])

save_to_file()