# -*- coding: utf-8 -*-
"""Human Data 570.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bgtOzx5yaLkG2n1ODNN27Vq-UMBSBhsC
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
import statistics

from sklearn.model_selection import train_test_split
from sklearn.model_selection import LeaveOneOut
from sklearn.linear_model import LassoCV
from sklearn.linear_model import LassoLars
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model import LogisticRegressionCV
import seaborn as sns

CG_table = pd.read_csv('human_meth_cleaned.csv')
human_table = pd.read_csv('MetadataHuman2021_554.csv')

#### Clean methylation table

CG_table_drop = CG_table.drop(['Chromosome', 'Start', 'Stop'],axis=1)
CG_table_drop = CG_table_drop.dropna(axis = 'rows')
CG_table_drop = CG_table_drop.to_numpy()
CG_table_drop = np.transpose(CG_table_drop)
print(CG_table_drop)
print(CG_table_drop.shape)

#### Extract ages and genders
ages = human_table['age']
genders = human_table['gender']

ages = ages.to_numpy()
print(ages.shape)

#### Function for age prediction

def get_lars_age_predictions(X_train, Y_train):
    loo = LeaveOneOut()
    predicted_ages = []

    for train_index, test_index in loo.split(X_train):
        X_retrain, X_retest = X_train[train_index], X_train[test_index]
        Y_retrain, Y_retest = Y_train[train_index], Y_train[test_index]
        lars = LassoLars(alpha = 0.001)
        lars.fit(X_retrain, Y_retrain)
        predicted_ages.append(lars.predict(X_retest)[0])
    
    return predicted_ages

#### Functions for prediction quality assessment
def get_median_abs_error(prediction, actual):
    errors = []
    for i in range(len(prediction)):
        difference = np.abs(prediction[i] - actual[i])
        errors.append(difference)
    return statistics.median(errors)

def get_r_value(predicted_ages_list, actual_ages_list):
    r_value = np.corrcoef(actual_ages_list, predicted_ages_list)[0,1]
    return r_value

def get_r_squared(predicted_ages_list, actual_ages_list):
    return (get_r_value(predicted_ages_list, actual_ages_list)**2)

def plot_predictions(predicted_ages_list, actual_ages_list):
    plt.plot(actual_ages_list, predicted_ages_list, 'ko')
    plt.ylabel("Predicted Age")
    plt.xlabel("Actual Age")
    plt.title("Ridge Model of Predicted Age")
#     plt.text(8, 2, "Median Absolute Error: 0.6543")
#     plt.text(8, 1, "R squared: 0.9008")
    plt.plot(actual_ages_list, actual_ages_list, 'r--')
#     plt.savefig('Predicted_vs_actual_human_ridge_554.png', dpi = 400)
    plt.show()
    print("R squared: ", get_r_squared(predicted_ages_list, actual_ages_list))
    print("R value: ", get_r_value(predicted_ages_list, actual_ages_list))
    print("Median Absolute Error: ", get_median_abs_error(predicted_ages_list, actual_ages_list))

methylation = CG_table_drop
lars_predict = get_lars_age_predictions(methylation, ages)

plot_predictions(lars_predict, ages)

#### Try other machine learning models

from sklearn.cross_decomposition import PLSRegression
from sklearn.cross_decomposition import PLSCanonical
from sklearn.linear_model import ElasticNet
from sklearn.linear_model import Ridge

def get_pls_age_predictions(X_train, Y_train):
    loo = LeaveOneOut()
    predicted_ages = []

    for train_index, test_index in loo.split(X_train):
        X_retrain, X_retest = X_train[train_index], X_train[test_index]
        Y_retrain, Y_retest = Y_train[train_index], Y_train[test_index]
        pls = PLSRegression(n_components = 3)
        pls.fit(X_retrain, Y_retrain)
        predicted_ages.append(pls.predict(X_retest)[0][0])
    
    return predicted_ages

pls_predict = get_pls_age_predictions(methylation, ages)

plot_predictions(pls_predict, ages)

def get_elastic_age_predictions(X_train, Y_train):
    loo = LeaveOneOut()
    predicted_ages = []

    for train_index, test_index in loo.split(X_train):
        X_retrain, X_retest = X_train[train_index], X_train[test_index]
        Y_retrain, Y_retest = Y_train[train_index], Y_train[test_index]
        elastic = ElasticNet(alpha = 0.001, l1_ratio = 0.5)
        elastic.fit(X_retrain, Y_retrain)
        predicted_ages.append(elastic.predict(X_retest)[0])
    
    return predicted_ages

elastic_predict = get_elastic_age_predictions(methylation, ages)

plot_predictions(elastic_predict, ages)

def get_ridge_age_predictions(X_train, Y_train):
    loo = LeaveOneOut()
    predicted_ages = []

    for train_index, test_index in loo.split(X_train):
        X_retrain, X_retest = X_train[train_index], X_train[test_index]
        Y_retrain, Y_retest = Y_train[train_index], Y_train[test_index]
        ridge = Ridge(alpha = 0.0001)
        ridge.fit(X_retrain, Y_retrain)
        predicted_ages.append(ridge.predict(X_retest)[0])
    
    return predicted_ages

ridge_predict = get_ridge_age_predictions(methylation, ages)

plot_predictions(ridge_predict,ages)

