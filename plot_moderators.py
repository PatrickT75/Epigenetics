# -*- coding: utf-8 -*-
"""Buccal Moderators.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15otr6w3DnQDDE5aTa-AU1ohkVQYaRWqM
"""

#### Visualize all moderators and interactors of buccal sub-group in one plot using matplotlib
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import math
import statistics
import statsmodels.api as sm
from statsmodels.stats.multitest import fdrcorrection

total_len = np.arange(0,79)

file = pd.read_csv("MetadataHuman2021_554.csv")

meta = pd.read_csv("traits_buccal_used.csv")

meta = meta.set_index(total_len)

buccal = file[286:365]

buccal = buccal.set_index(total_len)

meta_cleaned = meta[~meta.isnull().any(axis=1)]

meta_cleaned = meta_cleaned.drop(columns=['prosperID', 'inaugural_barcode'], axis=1)

buccal_cleaned = buccal[~meta.isnull().any(axis=1).to_numpy()]

ages = buccal_cleaned['age']

predicted_ages = buccal_cleaned['LARS predicted age']

moderators = []
moderators_p = []
moderators_f = []
interactors = []
interactors_p = []
interactors_f = []

for column in meta_cleaned:
    moderation = meta_cleaned[column]
    interaction = meta_cleaned[column] * ages
    stack = np.stack((ages, moderation, interaction), axis = 1)
    model = sm.OLS(predicted_ages, stack)
    fit = model.fit()
    moderators.append(fit.params[1])
    moderators_fdr = fdrcorrection(fit.pvalues[1])
    moderators_f.append(moderators_fdr[1][0])
    moderators_p.append(fit.pvalues[1])
    interactors.append(fit.params[2])
    interactors_fdr = fdrcorrection(fit.pvalues[2])
    interactors_p.append(fit.pvalues[2])
    interactors_f.append(interactors_fdr[1][0])

interactors_pstars = []
interactors_count = 0
for interactor in interactors_p:
    if interactor > 0.05:
        interactors_pstars.append(' ')
    elif (interactor <= 0.05) & (interactor > 0.01):
        interactors_pstars.append('*')
    elif (interactor <= 0.01) & (interactor > 0.005):
        interactors_pstars.append('**')
    else:
        interactors_pstars.append('***')
        
    interactors_count += 1
    
moderators_pstars = []
moderators_count = 0
for moderator in moderators_p:
    if moderator > 0.05:
        moderators_pstars.append(' ')
    elif (interactor <= 0.05) & (interactor > 0.01):
        moderators_pstars.append('*')
    elif (interactor <= 0.01) & (interactor > 0.005):
        moderators_pstars.append('**')
    else:
        moderators_pstars.append('***')
        
    moderators_count += 1

interactors_pstars = np.array(interactors_pstars)
moderators_pstars = np.array(moderators_pstars)
labelnames = ['Height','Weight', 'BMI', 'Sleep Hours', 'Sleep from Optimal', 'Happy Score', 'Activity', 'Smoke', 'Smoke current', 'Alcohol (mg/kg)', 'Alcohol (drinks)', 'Fasting']

interactors_log = np.log10(interactors_p) * np.full(len(interactors_p), -1)
moderators_log = np.log10(moderators_p) * np.full(len(interactors_p), -1)

zipped_mix = zip(moderators_log, interactors_log, labelnames)
sorted_mix = sorted(zipped_mix, reverse=True)
X_mix = [label for mod, inter, label in sorted_mix]
mod_mix = [mod for mod, inter, label in sorted_mix]
inter_mix = [inter for mod, inter, label in sorted_mix]

figbuc, axbuc = plt.subplots()
index = np.arange(len(moderators))
bar_width = 0.35
opacity = 0.8

buc1 = plt.bar(index, mod_mix, bar_width,
alpha=opacity,
color='b',
label='Moderator')

buc2 = plt.bar(index + bar_width, inter_mix, bar_width,
alpha=opacity,
color='y',
label='Moderator * Age')

axbuc.set_ylabel('-log(p)')
axbuc.set_title('Buccal Moderation')
axbuc.set_xticks(index + 0.35/2)
axbuc.set_xticklabels(X_mix, rotation=90)

axbuc.legend()
